{"version":3,"file":"src/controllers/newpassword/new_pass_controller.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/newpassword/helper/new_pass_helper_f.ts","webpack://serverlessauth/./src/controllers/newpassword/new_pass_controller.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"bcryptjs\"","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"jsonwebtoken\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","import { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\n\r\n\r\nconst NewPasswordHelper = (userData:any)=>{\r\n \r\n\r\n  // destructure the data from the [event.body]\r\n\r\n   // destructuring data\r\n    const {new_password , confirm_password} = JSON.parse(userData);\r\n  \r\n  // check if [new Passoword] and [confirm_password] not empty or null or undefined\r\n\r\n  if(isDataPassedConditionChecking(new_password) && isDataPassedConditionChecking(confirm_password)){\r\n    // now means our [new passoword] and [confirm password] is valid for furthur process\r\n    \r\n    // check if both password is correct or not\r\n    if(new_password == confirm_password){\r\n       // means our [new password] is equals to [confirm password]\r\n       // pass the flow back to the programm\r\n\r\n       return true;\r\n\r\n    }else{\r\n       // means both password is not equal\r\n       // [Terminate] the programm\r\n       return false;\r\n    }\r\n\r\n\r\n\r\n  }else{\r\n    // means [New Password] and [Confirm Password] is not valid \r\n    // terminate the programm\r\n    return false;\r\n  }\r\n}\r\n\r\nexport {NewPasswordHelper}","// imorting types from aws-lambda\r\nimport { Handler, Context, Callback } from \"aws-lambda\";\r\nimport { ErrorConst } from \"../../constant/error_constant\";\r\nimport { sendSuccessResponse, throwErrorNow } from \"../../global/utils\";\r\nimport { NewPasswordHelper } from \"./helper/new_pass_helper_f\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport { connection } from \"../../dbconfig/db_connection\";\r\nimport * as dotenv from \"dotenv\";\r\nimport * as bcrypt from \"bcryptjs\";\r\n\r\n\r\n\r\n\r\n//making controller for [New Password]\r\nconst NewUserPassword: Handler = async (event: any, context: Context, callback: Callback) => {\r\n    // Now This is our New Password Controller \r\n    // First Step Declare Connection Variable\r\n\r\n    let con: any;\r\n\r\n    // available environment variable\r\n    dotenv.config();\r\n\r\n    // Now its time to check whether [event.body] contains data or not\r\n\r\n    if (event.body) {\r\n        // means that the [event.body] is not empty\r\n        // now we have to check the [new password] and [confirm Password]\r\n        // should be equal and should not be empty;\r\n\r\n        if (NewPasswordHelper(event.body)) {\r\n            // Now our both password is equal but we need \r\n            // only new passworf not confirm  password [Confirm password] was only for equality validation prupose\r\n            // now our flow will be now \r\n            // customer is not loggedin \r\n            // so we need to verify the [token] which we have send in the user email\r\n            // in the token we have store the user id \r\n            // and our token expiry time is [15] min if somehow \r\n            // user will not able to click the link withiN 15min \r\n            // the link will expire and we will [Terminate] the programm\r\n            // so we need to make sure that [Token] is not expired and if expired thorw error to user\r\n            // If token is not expired extract user id from [Token]\r\n            // and take new password field from [event.body]\r\n            // and update the user password where user_unique_key  = userid\r\n            // hope you are understanding the programm flow\r\n\r\n\r\n            try {\r\n                // extract the token from path parameter \r\n                const userToken = event.pathParameters?.token;\r\n\r\n                // console the token\r\n                console.log(\"Your token = \" + userToken);\r\n                // now we have the token\r\n                // now its time to verify the token\r\n                const isTokenVarified: any = jwt.verify(userToken, process.env.ForgotPasswordkey ?? \"No Key\");\r\n\r\n                if (isTokenVarified) {\r\n                    // IF token is verified extract the user id from the tokem\r\n                    const { user_id } = isTokenVarified;\r\n\r\n                    console.log(\"Inder User Id = \" + user_id);\r\n\r\n                    // extract the user new password from [event.body] object\r\n                    const { new_password } = JSON.parse(event.body);\r\n\r\n                    // hash the user password\r\n\r\n\r\n                    // now we are hashing the password\r\n                    const salt = await bcrypt.genSalt(10);\r\n\r\n                    // hash the password\r\n                    const password_hashed = await bcrypt.hash(new_password, salt);\r\n\r\n                    // resolve connection to db\r\n                    con = await connection();\r\n\r\n                    // const prepared query \r\n                    const new_pass_query = `Call new_password(? , ?)`;\r\n\r\n                    // resolve query\r\n                    const isUserPasswordChanged = await con.query(new_pass_query, [user_id, password_hashed]);\r\n\r\n                    // check if new password updated or not THEN  react go accrodingly\r\n                    if (isUserPasswordChanged) {\r\n                        // means our password is updated successfully \r\n                        // send message to user that their password is updated successfully\r\n                        const successMessage = { message: \"Conratulations! your password is now updated you can now login into the system\" }\r\n                        return sendSuccessResponse(200, successMessage);\r\n\r\n\r\n                    } else {\r\n                        // means our password is not updated successfully \r\n                        // Send error response to user \r\n\r\n                        return throwErrorNow(400, ErrorConst.newPasswordFailedToUpdate);\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    // if token is not varified  throw error\r\n                    return throwErrorNow(401, ErrorConst.invalidToken)\r\n                }\r\n\r\n            } catch (e) {\r\n                // IF some error occured\r\n                console.log(\"Catch run hua\");\r\n                console.log(e);\r\n                return throwErrorNow(401, ErrorConst.unknowErrorOccured);\r\n\r\n            } finally {\r\n                // if connection open \r\n                // close it now\r\n                if (con) {\r\n                    con.end();\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        } else {\r\n            // means [New Password] and [Confirm Password]\r\n            // is not equal or data is [invalid]\r\n            return throwErrorNow(401, ErrorConst.bothPasswordError);\r\n        }\r\n\r\n    } else {\r\n        // event.body does not contains the data\r\n        // [Terminate] the programm\r\n\r\n        return throwErrorNow(502, ErrorConst.EventBodyEmpty);\r\n    }\r\n}\r\n\r\nexport { NewUserPassword }","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"bcryptjs\");","module.exports = require(\"dotenv\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"promise-mysql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/newpassword/new_pass_controller.ts\");\n",""],"names":[],"sourceRoot":""}
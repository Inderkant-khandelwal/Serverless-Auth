{"version":3,"file":"src/controllers/forgotpassword/forgot_pass_controller.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/forgotpassword/forgot_pass_controller.ts","webpack://serverlessauth/./src/controllers/forgotpassword/helper/forgot_pass_helper_f.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/email_transporter.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"jsonwebtoken\"","webpack://serverlessauth/external commonjs \"nodemailer\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","// importing types from aws lambda\r\nimport { Handler, Context, Callback } from \"aws-lambda\";\r\nimport { Connection } from \"promise-mysql\";\r\nimport { ErrorConst } from \"../../constant/error_constant\";\r\nimport { connection } from \"../../dbconfig/db_connection\";\r\nimport { configureTransportOptions } from \"../../global/email_transporter\";\r\nimport { sendSuccessResponse, throwErrorNow } from \"../../global/utils\";\r\nimport { ForgotPasswordHelper } from \"./helper/forgot_pass_helper_f\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\n\r\n// create [forgot password] handler\r\n\r\nconst ForgotUserPassword: Handler = async (event: any, context: Context, callback: Callback) => {\r\n    // here our first step to declare connection variable\r\n    let con: any;\r\n\r\n    // now we have to check whether [Event.body] is empty or not\r\n\r\n    if (event.body) {\r\n        // means our [event.body] is not empty\r\n        // return sendSuccessResponse(200 , {message:\"your datat is\" + event.body});\r\n\r\n        // now it time to check [event.body] Should Contain the\r\n        // [Valid] email why ? because this is \r\n        // [Forgot Password] Flow and means user does not remember \r\n        // their password and also means that user is not loggedin\r\n        // IF user is not loggedin means it will not send the \r\n        // [Token] thats why we need the [User - Email]\r\n\r\n        // check is user data is valid for furthur process\r\n        if (ForgotPasswordHelper(event.body)) {\r\n            // now means our our email is valid for furthur programm\r\n\r\n            try {\r\n\r\n                // destructure the user-email \r\n                const { user_email } = JSON.parse(event.body);\r\n\r\n\r\n                // resolve Connection\r\n                con = await connection();\r\n\r\n                // prepare query \r\n                const user_forgot_password_query = `Call user_forgot_password(?)`;\r\n\r\n\r\n                // resolve query\r\n                const isUserFound = await con.query(user_forgot_password_query, [user_email]);\r\n\r\n                // check if we found the user\r\n                // IF so then make [one] Link and send it to user email\r\n                // on that link user can change their password\r\n\r\n                if (isUserFound) {\r\n                    // means IF user found\r\n\r\n                    // destrcut the user name\r\n                    const { user_name: user_db_name, user_unique_key: user_key } = isUserFound[0][0];\r\n\r\n                    // generate a [jwt] that will be valid till 15 min\r\n                    // and add the user [unique key ] int the jwt payload\r\n\r\n                    const user_payload = { user_id: user_key }\r\n                    const secret_key: any = process.env.ForgotPasswordkey\r\n                    const token_will_expire_time = { expiresIn: '15min' }\r\n\r\n                    const auth_final_user_token = jwt.sign(user_payload, secret_key, token_will_expire_time);\r\n\r\n                    // make one link for sending to user\r\n                    const userLink = `http://localhost:3000/dev/user/newpassword/${auth_final_user_token}`;\r\n\r\n                    // now send the mail to user\r\n                    const isEmailSend = await configureTransportOptions(process.env.HOST_G, process.env.PORT, process.env.Email_UserName, process.env.Email_Pass).sendMail({\r\n                        from: process.env.Email_Id,\r\n                        to: user_email,\r\n                        subject: \"Password Reset Link\",\r\n                        html: `<p> Dear <em>${user_db_name}</em> click this link for Reset your <b>Password</b> <a href=${userLink}\">${userLink}</a> Valid till 15 minutes </p>`\r\n\r\n                    });\r\n\r\n                    // check if mail is send or not\r\n                    if (isEmailSend) {\r\n                        // means we have finally send the mail to user\r\n                        // notify the user with message\r\n                        const successMessage = { message: \"We sends you a Password Reset Link on your mail Valid till 15min\", userLink: userLink }\r\n\r\n                        // return success response\r\n                        return sendSuccessResponse(200, successMessage)\r\n                    } else {\r\n                        // means IF email not send\r\n                        // return error to user\r\n\r\n                        return throwErrorNow(502, ErrorConst.Emailnotsend);\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    // means user not found [Terminate] the programm\r\n                    return throwErrorNow(401, ErrorConst.invalidUser);\r\n                }\r\n\r\n\r\n\r\n            } catch (error) {\r\n                // when error bhai comes handle it\r\n                console.log(error);\r\n\r\n                return throwErrorNow(502, ErrorConst.unknowErrorOccured);\r\n            } finally {\r\n                // IF connection is open close the connection\r\n                if (con) {\r\n                    con.end();\r\n                }\r\n\r\n            }\r\n\r\n\r\n        } else {\r\n            // it clearly means our email is not valid \r\n            // [Terminate] the programm\r\n\r\n            return throwErrorNow(401, ErrorConst.invalidEmail);\r\n        }\r\n\r\n    } else {\r\n        // means we did not receive the [event.body] \r\n        // terminate the programm\r\n\r\n        return throwErrorNow(400, ErrorConst.EventBodyEmpty);\r\n\r\n    }\r\n}\r\n\r\nexport { ForgotUserPassword }","\r\n// making forgot password helper\r\n\r\nimport { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\nimport { email_regex } from \"../../../global/utils\";\r\n\r\n\r\n\r\nconst ForgotPasswordHelper = (userData:any)=>{\r\n  // here we need to destructure the data from [event.body]\r\n  \r\n  // destruct the email\r\n  const {user_email} = JSON.parse(userData);\r\n\r\n  // now we got the email\r\n  // now need to check if email should not be empty or null or undefined\r\n\r\n  if(isDataPassedConditionChecking(user_email)){\r\n     // means that user data is valid for furthur\r\n     // process\r\n     // now its time to check whether \r\n     // the given [Email] is valid or not\r\n     \r\n     if(email_regex.test(user_email)){\r\n        // now user email valid we can go for furthur programm flow\r\n        return true\r\n     }else{\r\n        return false;\r\n     }\r\n    \r\n\r\n  }else{\r\n    // means our user data is not correct\r\n\r\n    return false;\r\n\r\n  }\r\n}\r\n\r\nexport {ForgotPasswordHelper}","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","import nodemailer from \"nodemailer\";\r\n\r\n\r\nconst configureTransportOptions = (servc: string | undefined, prt:any, userEmail:string | undefined | any, userPass:string | undefined)=>{\r\n \r\n    \r\n    \r\n    \r\n   const finalUserName = userEmail+\"@gmail.com\";\r\n   const transport =  nodemailer.createTransport({\r\n        service:servc,\r\n        port:prt,\r\n        secure: false,\r\n        auth:{\r\n            user:finalUserName,\r\n            pass:userPass, \r\n        }, tls:{\r\n           rejectUnauthorized:false \r\n        }\r\n    });\r\n   \r\n \r\n\r\n    return transport;\r\n}\r\n\r\n\r\nexport {configureTransportOptions}\r\n\r\n//\"\"","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"dotenv\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"nodemailer\");","module.exports = require(\"promise-mysql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/forgotpassword/forgot_pass_controller.ts\");\n",""],"names":[],"sourceRoot":""}
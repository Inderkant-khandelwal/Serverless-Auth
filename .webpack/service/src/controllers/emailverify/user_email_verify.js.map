{"version":3,"file":"src/controllers/emailverify/user_email_verify.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/emailverify/helper/email_verify_helper.ts","webpack://serverlessauth/./src/controllers/emailverify/user_email_verify.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"jsonwebtoken\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","import { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\nimport { otp_regex } from \"../../../global/utils\";\r\n\r\nconst UserEmailVerificationHerlper = (userData:any)=>{\r\n// we get the data in [userDat] variable\r\n// we need to destructuture the data\r\n\r\n// destructurin the otp from the event.body \r\nconst {otp} = JSON.parse(userData);\r\n\r\nconsole.log(\"ye ara \" + otp)\r\n\r\n// verify the otp is valid or not\r\n\r\n if(isDataPassedConditionChecking(otp)){\r\n    // now the otp passes the condition\r\n    // now we have to check \r\n    // if the opt is valid or not\r\n    // means we need the otp only eight digit not more than and \r\n    // only numeric type\r\n\r\n    if(otp_regex.test(otp)){\r\n      // if otp match then only pass the flow for furthur\r\n      // else return false terminate the flow by sending the error to client\r\n      return true;\r\n    }else{\r\n        // otp not matched\r\n        console.log(\"OTP not matched\");\r\n        return false;\r\n    }\r\n\r\n    \r\n }else{\r\n    // in case otp did not passed the codition\r\n    return false;\r\n }\r\n\r\n}\r\n\r\nexport {UserEmailVerificationHerlper}","import { Handler, Context, Callback } from \"aws-lambda\";\r\nimport { ErrorConst } from \"../../constant/error_constant\";\r\nimport { sendSuccessResponse, throwErrorNow } from \"../../global/utils\";\r\nimport { UserEmailVerificationHerlper } from \"./helper/email_verify_helper\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { connection } from \"../../dbconfig/db_connection\";\r\n\r\n\r\n\r\nconst EmailVerification = async (event: any, context: Context, callback: Callback) => {\r\n\r\n\r\n    // initialze dotenv variable\r\n    dotenv.config();\r\n\r\n\r\n    // init con var\r\n    let con: any;\r\n    // step first \r\n    // check the event.body object is empty or not\r\n    // if not empty through the error\r\n\r\n\r\n    if (event.body) {\r\n        // now it means our event body is not empty \r\n        // now we have to validated the data\r\n\r\n        if (UserEmailVerificationHerlper(event.body)) {\r\n            // here it means we have test the otp and all condition\r\n            // now client has sent us the otp\r\n            // which is [Eight numeric Digit]\r\n\r\n            // now otp verification is [Protected Route] means\r\n            // user need to send us the token\r\n            // in our case \r\n            // only one\r\n\r\n            // getting the both token\r\n\r\n            try {\r\n                if (event.headers.Authorization) {\r\n                    // if we get the headers\r\n                    // get the headers\r\n                    const auth_token = event.headers.Authorization;\r\n\r\n\r\n                    // extract user auth token\r\n                    const user_otp_token = auth_token.split(\" \")[1];\r\n\r\n\r\n                    // verify the token\r\n                    const isAuthTokenVerified: any = jwt.verify(user_otp_token, process.env.otp_jwt_key ?? \"\");\r\n\r\n\r\n                    // check if the [user auth token is verifiend or not]\r\n                    if (isAuthTokenVerified) {\r\n                        console.log(\"true condition\");\r\n                        console.log(isAuthTokenVerified);\r\n                        // it means [user auth is valid and user is trustable]\r\n\r\n                        // extract the user details so that we can make sure that the\r\n                        // otp send by the user is valid or not\r\n\r\n                        const { name, email } = isAuthTokenVerified;\r\n\r\n\r\n                        console.log(\"destructure result\");\r\n\r\n                        console.log(name, email);\r\n\r\n\r\n\r\n                        // get the otp from [event.body]\r\n                        const { otp } = JSON.parse(event.body);\r\n\r\n                        // resolve connection now\r\n                        con = await connection();\r\n\r\n\r\n                        // query for otp checking\r\n                        const query_otp = `Call check_otp(?,?,?,?)`;\r\n\r\n\r\n                        const verified_status = \"Verified\";\r\n                        const failed_to_verified = \"Failed\"\r\n                        // resolve query\r\n                        const isOtpVerified = await con.query(query_otp, [email, otp, verified_status, failed_to_verified]);\r\n\r\n\r\n                        // check if otp verifiend and also update the [user_verified_status  = Verified] if otp is match\r\n\r\n                        if (isOtpVerified) {\r\n                            // now our otp is verified \r\n                            // generaten then [access token] so that we can verify the user \r\n                            // when he will try to access the [Private Resource]\r\n\r\n                            console.log(\"below is the data \");\r\n                            console.log(isOtpVerified);\r\n\r\n                            // extract user unique kye\r\n                            const { user_unique_key: user_key } = isOtpVerified[0][0];\r\n\r\n                            // now we have the key now generate the [Access Token ] so that\r\n                            // the user can have access to [Private Route]\r\n                            // let's generate the [Access Token]\r\n\r\n                            // encrypt user_id \r\n\r\n\r\n\r\n\r\n\r\n                            const user_payload = { user_id: user_key }\r\n                            const secret_key: any = process.env.FinalAuthKey\r\n                            const token_will_expire_time = { expiresIn: '1h' }\r\n\r\n                            const auth_final_user_token = jwt.sign(user_payload, secret_key, token_will_expire_time);\r\n\r\n\r\n                            // now we have generated the token\r\n                            const userMessage = { access_token: auth_final_user_token, successMessage: \"Successfully Verified\" };\r\n\r\n                            // send the [Success Message to user with Sucess Message]\r\n                            return sendSuccessResponse(200, userMessage);\r\n\r\n\r\n\r\n                        } else {\r\n                            // otp not varified \r\n\r\n                            return throwErrorNow(401, ErrorConst.otpNotVarified);\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    } else {\r\n                        // this means user is not trusted break the flow or terminated the programm\r\n                        return throwErrorNow(401, ErrorConst.tokenNotValidAuth);\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                } else {\r\n                    // in case we did not get the headers\r\n                    return throwErrorNow(400, ErrorConst.headersNotAvailable);\r\n                }\r\n\r\n\r\n            } catch (error: any) {\r\n                // in case some error occured\r\n                console.log(error);\r\n                const erroMess = error.sqlMessage;\r\n                console.log(\"catch run hua\")\r\n                return throwErrorNow(400, erroMess ?? ErrorConst.headersNotAvailable);\r\n            } finally {\r\n                if (con) {\r\n                    con.end();\r\n                }\r\n            }\r\n\r\n\r\n\r\n        } else {\r\n            // our otp fails to validate\r\n            // send error to the client\r\n\r\n            return throwErrorNow(400, ErrorConst.otpnotvalidclienterror);\r\n        }\r\n\r\n    } else {\r\n        // event.body is empty throw the error to the client\r\n        // that the body is required\r\n\r\n        return throwErrorNow(400, ErrorConst.EventBodyEmpty);\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { EmailVerification }","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"dotenv\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"promise-mysql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/emailverify/user_email_verify.ts\");\n",""],"names":[],"sourceRoot":""}
{"version":3,"file":"src/controllers/registration/user_registration_controller.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/registration/helper/user_registration_helper_f.ts","webpack://serverlessauth/./src/controllers/registration/user_registration_controller.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"bcryptjs\"","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/external commonjs \"uuid\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","// importing userRegistration Interface for typeChecking\r\nimport { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\nimport { email_regex, phone_number_regex } from \"../../../global/utils\";\r\n\r\nconst checkUserRegistrationFormData = (userData: any) => {\r\n\r\n\r\n\r\n  // destructure the data from the event.body   \r\n  const { user_name, user_email, user_mobile, user_city, user_country, user_password } = JSON.parse(userData);\r\n\r\n\r\n\r\n  // here we are checking the field of every form is valid or not  \r\n  // if even single field is not valid or null or undefined or empty \r\n  // return false else return true\r\n  if (isDataPassedConditionChecking(user_name), isDataPassedConditionChecking(user_email), isDataPassedConditionChecking(user_mobile), isDataPassedConditionChecking(user_city), isDataPassedConditionChecking(user_country), isDataPassedConditionChecking(user_password)) {\r\n    // now if we have all the variable then we need to check the email sent by the user to us\r\n    // if the email is not correct then return false else return true\r\n\r\n\r\n\r\n    // cheking email field through regex\r\n    if (email_regex.test(user_email)) {\r\n      // here we have also test the email\r\n      // if the email is valid then we are good to go \r\n      // for return the response to [true] \r\n\r\n      // we have tested the all data above through function\r\n      // and we have also checkced the email\r\n      // now we have to check the [mobile] number\r\n      // to back to the flow of programm\r\n\r\n      if (phone_number_regex.test(user_mobile)) {\r\n        // our phone number is correct return true for furthur process\r\n        return true;\r\n      } else {\r\n        // our pnone number is not correct return false for \r\n        // Termination\r\n\r\n        return false;\r\n      }\r\n\r\n\r\n    } else {\r\n      // here we are returning the [false] becoz our email not passed the condition\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n  } else {\r\n    // here we are returning the false to the flow of porgramm \r\n    // becoz  it may possbile our all field did not passed the condition\r\n    // or we can say that the our One of the field did not passed the condition\r\n    return false\r\n\r\n  }\r\n\r\n  // end of main function \r\n}\r\n\r\nexport { checkUserRegistrationFormData };","// importing Handler && Callback && Context types form aws-lambda type defination\nimport { Handler, Context, Callback } from \"aws-lambda\";\nimport { ErrorConst } from \"../../constant/error_constant\";\nimport { connection } from \"../../dbconfig/db_connection\";\nimport { checkUserRegistrationFormData } from \"./helper/user_registration_helper_f\";\nimport * as bcrypt from \"bcryptjs\";\nimport { v4 as uuidv4 } from 'uuid';\nimport { throwErrorNow } from \"../../global/utils\";\n\n// creating a function that will handle the user registration process \n\nconst AuthUserRegistration: Handler = async (event: any, context: Context, callback: Callback) => {\n\n\n    // now if need to register the user than we need the data from the client | user\n    // we can get the data from the [event] object in its body like [event.body];\n    // we also need to check that the event.body has the data or not if [event.body] has not the data\n    // send the error to the client that we need the data\n\n    // check if the event.body object has data or not\n    if (event.body) {\n        // if event.body has data we are good to go\n\n\n\n        // here we are passing the [event.body] to the [checkUserRegistrationFormData] function \n        // the function will return true only in case the [event.body] has all the data\n        // and email is valid\n\n        let con: any;\n\n\n        if (checkUserRegistrationFormData(event.body)) {\n\n            // here if all the data provide by the user then we are good to go\n            // for the user registration into the [DB] \n            // for that we need to make the connection to [DB]\n\n\n            // try block open\n            try {\n                // resolving  connection promise   \n                con = await connection();\n\n\n                // generate unique id for user\n                const user_unique_id = uuidv4();\n\n                // query \n                const query = `CALL save_user(?,?,?,?,?,?,?)`;\n\n\n                // destructure the data from the event.body   \n                const { user_name, user_email, user_mobile, user_city, user_country, user_password } = JSON.parse(event.body);\n\n\n                // now we are hashing the password\n                const salt = await bcrypt.genSalt(10);\n\n                // hash the password\n                const password_hashed = await bcrypt.hash(user_password, salt);\n                console.log(password_hashed);\n\n                // resolving the query\n                const result = await con.query(query, [user_name, user_email, user_mobile, user_city, user_country, password_hashed, user_unique_id]);\n\n                // checking if [result] has something or not\n                if (result) {\n                    // if query successfull\n                    const successResult = {\n                        statusCode: 201,\n                        body: JSON.stringify({ message: \"Successfully Created User\", result: result })\n                    }\n\n                    // return the successResult\n                    return successResult;\n\n\n                } else {\n                    // if query not successfull or something happen unknown\n                    const failedResult = {\n                        statusCode: 200,\n                        body: JSON.stringify({ message: \"Failed Query\" })\n\n                    }\n\n                    // return the failed result\n                    return failedResult;\n                }\n\n\n\n                // catch block open\n            } catch (error: any) {\n\n                console.log(error);\n                // declare err msgv var\n                let errMsg: any;\n\n                // checking if error object has something or not \n                if (error) {\n                    // assigning the my sql error msg which we have created in the [MYSQL-PROCEDURE-STATEMENT]\n                    errMsg = error.sqlMessage\n                }\n\n                // creating the error object\n                const errorObject = {\n                    statusCode: 502,\n                    body: JSON.stringify({ message: ErrorConst.RegisterUserCon, err: errMsg })\n                }\n\n\n                // return errorObject;\n                return errorObject;\n\n            } finally {\n                // if connection is open\n                // close it\n\n                if (con) {\n                    con.end();\n                }\n\n            }\n\n\n\n\n        } else {\n\n            // making error object if the data provided by the user not valid\n\n            const errorObject = {\n                statusCode: 200,\n                body: JSON.stringify({ message: ErrorConst.RegisterFiledError })\n            }\n\n            // returning the error object   \n            return errorObject;\n        }\n\n\n\n\n\n\n\n\n    } else {\n        // here in case [event.body] is undefined or null or empty\n        // then we are returing the response to the client in the JSON format\n\n\n        // returning the error object\n        return throwErrorNow(400, ErrorConst.EventBodyEmpty);\n\n\n\n    }\n\n\n\n\n    // here the end of main function    \n}\n\n\nexport { AuthUserRegistration }\n","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"bcryptjs\");","module.exports = require(\"dotenv\");","module.exports = require(\"promise-mysql\");","module.exports = require(\"uuid\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/registration/user_registration_controller.ts\");\n",""],"names":[],"sourceRoot":""}
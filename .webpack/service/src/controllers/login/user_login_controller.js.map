{"version":3,"file":"src/controllers/login/user_login_controller.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/login/helper/user_login_helper_f.ts","webpack://serverlessauth/./src/controllers/login/user_login_controller.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/email_transporter.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"bcryptjs\"","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"jsonwebtoken\"","webpack://serverlessauth/external commonjs \"nodemailer\"","webpack://serverlessauth/external commonjs \"otp-generator\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","import { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\nimport { email_regex, phone_number_regex } from \"../../../global/utils\";\r\n\r\n\r\nconst userLoginHelper = (userLoginData:any)=>{\r\n    // here we have receive the user login data \r\n     \r\n    let isEmail:boolean , isPhoneNumber:boolean;\r\n\r\n   \r\n   \r\n   // step - 1\r\n   // destructure user data\r\n  \r\n   const {user_username, user_password} = JSON.parse(userLoginData);\r\n\r\n   // check if the [Destructured] data is valid or not \r\n\r\n    if(isDataPassedConditionChecking(user_username) , isDataPassedConditionChecking(user_password)){\r\n       // now we have test the condition \r\n       // now we have two condition that user can send the [data] as username either mobile number or email not other than\r\n       // first we need to check that the data we have in username\r\n\r\n       \r\n       // checking is username is email or not\r\n       if(email_regex.test(user_username)){\r\n              isEmail = true;\r\n              isPhoneNumber = false;\r\n\r\n        // if user email \r\n        }else{\r\n            // checking if username is Phonenumber or not\r\n            if(phone_number_regex.test(user_username)){\r\n                // it means user has provided the number in the place of username\r\n                isEmail = false;\r\n                isPhoneNumber = true;\r\n            }else{\r\n                // it means user did not provide the [Email or Phonnumber] in place of username\r\n\r\n                isEmail = false;\r\n                isPhoneNumber = false;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        // now we have checked the codition that username is [Email] or [Number]\r\n        // in case we did not reveive none of them\r\n        // return false\r\n\r\n        if(isEmail){\r\n\r\n           // means username is [Email]\r\n           return true;\r\n        }else if(isPhoneNumber){\r\n\r\n            // means usernname is [PhoneNumber]\r\n            return true;\r\n        }else{\r\n            // means we did not get the idea what user has provided \r\n            // falied the condtion \r\n\r\n            return false\r\n        }\r\n\r\n\r\n      \r\n\r\n\r\n\r\n     }else{\r\n        // here is somehow the user data does not [Passed] the codition\r\n        // return false\r\n\r\n        return false;\r\n     }\r\n\r\n}\r\n\r\nexport {userLoginHelper}","import { Handler, Context, Callback } from \"aws-lambda\";\r\nimport { connection } from \"../../dbconfig/db_connection\";\r\nimport { ErrorConst } from \"../../constant/error_constant\";\r\nimport { sendSuccessResponse, throwErrorNow } from \"../../global/utils\";\r\nimport { userLoginHelper } from \"./helper/user_login_helper_f\";\r\nimport * as bcrypt from \"bcryptjs\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport otp from \"otp-generator\";\r\nimport { configureTransportOptions } from \"../../global/email_transporter\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// making login controller\r\nconst Login: Handler = async (event: any, context: Context, callback: Callback) => {\r\n\r\n    // declare connection and other variable so that we can assign the connection to it later\r\n    let con: any;\r\n\r\n    let jwt_token_otp: any;\r\n\r\n    // check if [ event.body ] object has data or not\r\n    if (event.body) {\r\n\r\n\r\n\r\n        // check the data which we have receive the from event body\r\n        if (userLoginHelper(event.body)) {\r\n            // if our data which we have received from the [Event.body] object is correct \r\n            // now here we are good to go for the next flow of our program\r\n            // which is to check the user_credentials in our db \r\n            // if user exists and user password is valid \r\n            // generate [JWT] and send it to the user with the [JWT] expirytime \r\n            // and send a [OTP] to user on their mail for Email Verification\r\n            console.log(event.body + \"   \" + \"Inder\");\r\n            try {\r\n\r\n                // resolve connection to db\r\n                con = await connection();\r\n\r\n                // destructure the data\r\n                const { user_username, user_password } = JSON.parse(event.body);\r\n\r\n\r\n                // query\r\n                const query_login = `Call login_user(?)`;\r\n\r\n\r\n                // resolve query\r\n                const result = await con.query(query_login, [user_username]);\r\n\r\n                if (result) {\r\n                    // it means we have found the user in our db now its time to\r\n                    // Authenticate user with password \r\n\r\n                    // if we get the data from the db extract the data\r\n                    const { user_unique_key: user_key, user_email: user_db_email, user_password: user_db_password, user_name: user_db_name, user_verified_status: user_is_verified } = result[0][0];\r\n\r\n                    // now we have user_email and user_password\r\n                    // verify the user [DB] password which user sends us in the event.body object\r\n\r\n\r\n                    // destructure the password send by the user\r\n                    const { user_password: pass } = JSON.parse(event.body);\r\n\r\n                    // compare the password\r\n                    const isPasswordMatch = await bcrypt.compare(pass, user_db_password);\r\n\r\n                    console.log(user_db_password);\r\n\r\n                    if (isPasswordMatch) {\r\n\r\n                        // now one more thing we have to do\r\n                        // is that IF [user-email] already verified \r\n                        // no need to send the OTP on email but \r\n                        // IF user is not Verified then continue to the flow\r\n\r\n                        // check if user email is verified or not\r\n                        if (user_is_verified && user_is_verified == \"Verified\") {\r\n                            // means user is Verified no need to send the OTP on mail\r\n                            // generate [JWT] and send it to the user\r\n\r\n                            const user_payload = { user_id: user_key }\r\n                            const secret_key: any = process.env.FinalAuthKey\r\n                            const token_will_expire_time = { expiresIn: '1h' }\r\n\r\n                            const auth_final_user_token = jwt.sign(user_payload, secret_key, token_will_expire_time);\r\n\r\n\r\n                            // now we have generated the token\r\n                            const userMessage = { access_token: auth_final_user_token, successMessage: \"Successfully LoggedIn\" };\r\n\r\n                            // send the [Success Message to user with Sucess Message]\r\n                            return sendSuccessResponse(200, userMessage);\r\n\r\n                        } else {\r\n                            // user is not varified we need to send the [OTP] on mail\r\n                            // generate one  jwt for [OTP] so that we can decide that the \r\n                            // the otp which is entered into the system is correct or expired\r\n                            // means we have time limited while Authenticated the [OTP] \r\n                            // of 15 min if user did not entered the [OTP] in the given time \r\n                            // then otp should not be validate\r\n\r\n                            const payload_otp = { name: user_db_name, email: user_db_email };\r\n                            const expires_otp = { expiresIn: '15m' };\r\n                            const env_key_jwt_otp: any = process.env.otp_jwt_key;\r\n                            jwt_token_otp = jwt.sign(payload_otp, env_key_jwt_otp, expires_otp);\r\n\r\n\r\n                            // now we need to send the OTP on user mail\r\n\r\n                            // generate otp\r\n                            const otpToSend = otp.generate(8, { upperCaseAlphabets: false, lowerCaseAlphabets: false, specialChars: false });\r\n\r\n                            // send generated otp to user on his mail\r\n\r\n\r\n                            // configure mail to send\r\n                            // check gloabl folder [email_transporter.ts] file for configuring the mail auth\r\n                            // which is responsible for sending the mail\r\n                            // console.log(process.env.HOST_G , process.env.PORT , process.env.Email_Id , process.env.Email_Pass)\r\n                            // console.log(\"kahani yaah taki eeyo\");\r\n                            const isEmailSend = await configureTransportOptions(process.env.HOST_G, process.env.PORT, process.env.Email_UserName, process.env.Email_Pass).sendMail({\r\n                                from: process.env.Email_Id,\r\n                                to: user_db_email,\r\n                                subject: \"Your One Time OTP for Email Verify\",\r\n                                html: `<p> Dear <em>${user_db_name}</em> Your one time <b>OTP</b> is <strong style=\"color:red;font-size:50px\">${otpToSend}</strong> Valid till 15 minutes </p>`\r\n\r\n                            });\r\n\r\n                            // console.log(\"Kahani AAge\");\r\n\r\n                            // check if email is send or not\r\n                            // if email is send then send \r\n                            // user response that we have send your otp on mail check your mail\r\n                            // with jwt token \r\n                            // why jwt token because this is login \r\n                            // and if user does not have the token then it means he or she not authencated\r\n                            // console.log(\"Before Email Send\");\r\n                            if (isEmailSend) {\r\n\r\n                                console.log(\"After Email Send\");\r\n                                // it means email is send  to user\r\n                                const successMessage = { successMessage: \"we send you an otp on your email please verify with in 15 Minutes\", otp_token: jwt_token_otp }\r\n\r\n\r\n                                // now we have send the mail to user now save otp to [DB]\r\n                                // if we save otp to db we can easily detect the otp\r\n                                // send by the user is  valid or not only when the jwt is not expired in that case only\r\n\r\n                                // user otp query to add \r\n                                const otp_query = `Call save_otp(?,?,?)`;\r\n\r\n                                const status_of_otp = \"OTP SENT\";\r\n                                // resolving otp query\r\n                                const isOtpUpdated = await con.query(otp_query, [otpToSend, user_db_email, status_of_otp]);\r\n\r\n\r\n\r\n                                // if otp updated successfully\r\n                                if (isOtpUpdated) {\r\n                                    return sendSuccessResponse(200, successMessage);\r\n                                } else {\r\n                                    // when [OTP] failed to add into the system\r\n                                    return throwErrorNow(401, ErrorConst.OtpFailedToUpdate);\r\n                                }\r\n\r\n\r\n\r\n\r\n\r\n                            } else {\r\n                                // when some error occured while sending Email\r\n                                return throwErrorNow(401, ErrorConst.Emailnotsend);\r\n                            }\r\n\r\n\r\n\r\n\r\n                        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                    } else {\r\n                        // if the password not match throw error to client\r\n                        return throwErrorNow(401, ErrorConst.PasswordNotMatched);\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n                } else {\r\n\r\n                    // if we did not get the result or login failed\r\n                    return throwErrorNow(401, ErrorConst.LoginFailedWhileChecking);\r\n\r\n                }\r\n\r\n            } catch (error) {\r\n                // if something unexpected happen\r\n                console.log(\"Login Query Catch Error\");\r\n                console.log(error);\r\n\r\n                // if we did not get the result or login failed\r\n                return throwErrorNow(401, ErrorConst.LoginFailedWhileChecking);\r\n            }\r\n            finally {\r\n                // IF connection is open close it\r\n                if (con) {\r\n                    con.end();\r\n                }\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n        } else {\r\n            // it means our data which is sent by user has failed validation now \r\n            // throw error to client\r\n            console.log(\"Inderkant - Data Condition Failed\");\r\n            return throwErrorNow(200, ErrorConst.LoginDataConditionFalied);\r\n        }\r\n\r\n\r\n\r\n    } else {\r\n        // if event.body is empty\r\n        // throw error \r\n\r\n        return throwErrorNow(200, ErrorConst.EventBodyEmpty);\r\n\r\n    }\r\n}\r\n\r\nexport { Login }","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","import nodemailer from \"nodemailer\";\r\n\r\n\r\nconst configureTransportOptions = (servc: string | undefined, prt:any, userEmail:string | undefined | any, userPass:string | undefined)=>{\r\n \r\n    \r\n    \r\n    \r\n   const finalUserName = userEmail+\"@gmail.com\";\r\n   const transport =  nodemailer.createTransport({\r\n        service:servc,\r\n        port:prt,\r\n        secure: false,\r\n        auth:{\r\n            user:finalUserName,\r\n            pass:userPass, \r\n        }, tls:{\r\n           rejectUnauthorized:false \r\n        }\r\n    });\r\n   \r\n \r\n\r\n    return transport;\r\n}\r\n\r\n\r\nexport {configureTransportOptions}\r\n\r\n//\"\"","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"bcryptjs\");","module.exports = require(\"dotenv\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"nodemailer\");","module.exports = require(\"otp-generator\");","module.exports = require(\"promise-mysql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/login/user_login_controller.ts\");\n",""],"names":[],"sourceRoot":""}
{"version":3,"file":"src/controllers/updatepassword/update_pass_controller.js","mappings":"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","sources":["webpack://serverlessauth/./src/constant/error_constant.ts","webpack://serverlessauth/./src/controllers/updatepassword/helper/user_pass_updation_helper_f.ts","webpack://serverlessauth/./src/controllers/updatepassword/update_pass_controller.ts","webpack://serverlessauth/./src/dbconfig/db_connection.ts","webpack://serverlessauth/./src/global/condition_checking.ts","webpack://serverlessauth/./src/global/utils.ts","webpack://serverlessauth/external commonjs \"bcryptjs\"","webpack://serverlessauth/external commonjs \"dotenv\"","webpack://serverlessauth/external commonjs \"jsonwebtoken\"","webpack://serverlessauth/external commonjs \"promise-mysql\"","webpack://serverlessauth/webpack/bootstrap","webpack://serverlessauth/webpack/before-startup","webpack://serverlessauth/webpack/startup","webpack://serverlessauth/webpack/after-startup"],"sourcesContent":["const ErrorConst = {\r\n    EventBodyEmpty : \"Sorry invalid data provided or empty filed!\",\r\n    RegisterFiledError :\"Sorry we could not validate the data you provided\",\r\n    RegisterUserCon:\"Oops some error occured while registering\",\r\n    LoginDataConditionFalied:\"Invalid Data Provided !\",\r\n    LoginFailedWhileChecking:\"Sorry Invalid Credentials or Some Error Occured !\",\r\n    PasswordNotMatched:\"Sorry Invalid Credentials\",\r\n    Emailnotsend:\"Opps some error occured while sending OTP\",\r\n    OtpFailedToUpdate:\"Opps... Sorry Otp not updated! Try again\",\r\n    otpnotvalidclienterror:\"Opps... invalid otp\",\r\n    headersNotAvailable:\"Opps.. Headers not received\",\r\n    tokenNotValidAuth:\"Opps... Auth token not valid\",\r\n    otpNotVarified:\"Opps... wrong otp\",\r\n    updateFieldEmpty:\"Invalid Data Provided or Invalid Mobile Number\",\r\n    updationFailedInDb:\"Sorry...  data not updated try again later !\",\r\n    tokenNotAvailableInHeader:\"Sorry.. we could not Process the request It seems you are not Authorized!\",\r\n    unknowErrorOccured:\"Sorry.. some error occured!\",\r\n    invalidToken:\"Opps.. you are not authenticated!\",\r\n    passWordRequiredForUpdate:\"Password can't be empty\",\r\n    passwordNotValidValidationFailed:\"Opps... sorry password not acceptable!\",\r\n    passwordNotUpdatedIntoDb:\"Sorry... Password Updation Failed!\",\r\n    invalidEmail:\"In valid Email! Make Sure It is Correct\",\r\n    invalidUser:\"User Not Found!\",\r\n    bothPasswordError:\"Opps... we found some error in your data\",\r\n    newPasswordFailedToUpdate:\"Sorry... Failed To Update Password\"\r\n    \r\n    \r\n}\r\n\r\nexport {ErrorConst}","\r\nimport { isDataPassedConditionChecking } from \"../../../global/condition_checking\";\r\n\r\n// making [Update Password] Helper\r\nconst UpdatePasswordHelper = (userData:any)=>{\r\n  // first wee need to extract the data from the [Event.body is Present in [userDat]]\r\n\r\n  // destructure user password\r\n  const {user_password} = JSON.parse(userData);\r\n\r\n  // now we got the user password\r\n  // we need to make sure that\r\n  // pass should not be empty or undefined\r\n\r\n  if(isDataPassedConditionChecking(user_password)){\r\n      // it means the password which user has send us \r\n     //  is ok now we can return [true] back to the flow\r\n     return true;\r\n\r\n  }else{\r\n    // means [user password] is not valid\r\n    // [Terminate] the programm\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nexport {UpdatePasswordHelper}","// importing types from [aws-lambda]\r\nimport { Handler, Context, Callback } from \"aws-lambda\";\r\n\r\nimport { ErrorConst } from \"../../constant/error_constant\";\r\nimport { sendSuccessResponse, throwErrorNow } from \"../../global/utils\";\r\nimport { UpdatePasswordHelper } from \"./helper/user_pass_updation_helper_f\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport * as dotenv from \"dotenv\";\r\nimport { connection } from \"../../dbconfig/db_connection\";\r\nimport * as bcrypt from \"bcryptjs\";\r\n\r\n\r\n\r\n\r\n// making [Update Password] Controller\r\nconst UpdateUserPassword: Handler = async (event: any, context: Context, Callback: Callback) => {\r\n\r\n  // config dotenv variable\r\n  dotenv.config();\r\n\r\n  // here first we need to declare the [DB] connection var\r\n  let con: any;\r\n\r\n  // now we need to check that the [event.body] should not be empty\r\n\r\n  if (event.body) {\r\n    // means we have somedata in the body \r\n    // but we have to make sure that \r\n    // the data in the password field should be valid\r\n\r\n    if (UpdatePasswordHelper(event.body)) {\r\n      // Means we have finally check that the [Password] is valid\r\n\r\n      // now we have to check if the user header contains [Authorization] token\r\n      if (event.headers.Authorization) {\r\n        // Means our [Authorization] has some data lets \r\n        // find out what kind of data\r\n        // it have\r\n\r\n        try {\r\n\r\n          // extract token\r\n          const token = event.headers.Authorization.split(\" \")[1];\r\n\r\n          // checking token [valid or not]\r\n          // not valid [Terminate] the programm\r\n\r\n          // verify token\r\n          const isTokenValid: any = jwt.verify(token, process.env.FinalAuthKey ?? \"No key\");\r\n\r\n          if (isTokenValid) {\r\n            // if tokken is valid THEN\r\n            // extract the user id from token\r\n            const { user_id } = isTokenValid;\r\n\r\n            // destruct user password\r\n            const { user_password } = JSON.parse(event.body);\r\n\r\n            // now we need to [hash] the user password\r\n\r\n            // now we are hashing the password\r\n            const salt = await bcrypt.genSalt(10);\r\n\r\n            // hash the password\r\n            const password_hashed = await bcrypt.hash(user_password, salt);\r\n\r\n\r\n            // now we have the [User-Id]\r\n            // now resolve connection\r\n\r\n            con = await connection();\r\n\r\n\r\n            // prepare query\r\n            const update_password_query = `Call update_user_password(?,?)`;\r\n\r\n            // resolve query\r\n\r\n            const isPasswordUpdated = await con.query(update_password_query, [user_id, password_hashed]);\r\n\r\n\r\n            // check we have successfully updated the password or not\r\n            if (isPasswordUpdated) {\r\n              // means we have successfully updated the [password]\r\n              // send success message to user that \r\n              // password has been updated into the [DB]\r\n\r\n              // sucess message for user\r\n              const successMessage = { message: \"Congrats! Your password updated Successfully\" }\r\n\r\n              // send success message to usr\r\n              return sendSuccessResponse(200, successMessage);\r\n\r\n\r\n            } else {\r\n              // IF somehow the password failed to update\r\n              // send error to clinet that [Password] not updated\r\n\r\n              return throwErrorNow(400, ErrorConst.passwordNotUpdatedIntoDb);\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n\r\n\r\n          } else {\r\n            // means token is not valid [Terminate] the programm\r\n\r\n            return throwErrorNow(401, ErrorConst.invalidToken);\r\n\r\n          }\r\n\r\n\r\n          // check \r\n        } catch (error) {\r\n          // means some error occurs\r\n          console.log(error);\r\n\r\n          return throwErrorNow(401, ErrorConst.unknowErrorOccured);\r\n        } finally {\r\n          // IF connection is open \r\n          // close the connection\r\n\r\n          if (con) {\r\n            con.end();\r\n          }\r\n        }\r\n\r\n\r\n      } else {\r\n        // means we dont have [data] into the [Authorization]\r\n        // [Terminate] the programm\r\n\r\n        return throwErrorNow(401, ErrorConst.headersNotAvailable);\r\n      }\r\n\r\n\r\n    } else {\r\n      // it means our password not [valid]\r\n      // [Terminated] the programm\r\n\r\n      return throwErrorNow(401, ErrorConst.passwordNotValidValidationFailed);\r\n    }\r\n\r\n\r\n  } else {\r\n    // it means we dont have anything in the body\r\n    // send error to user that \r\n    // for updating the password \r\n    // we need password\r\n    return throwErrorNow(400, ErrorConst.passWordRequiredForUpdate);\r\n\r\n  }\r\n\r\n\r\n}\r\n\r\nexport { UpdateUserPassword }","\r\nimport  dotenv from \"dotenv\";\r\nimport mysql  from \"promise-mysql\";\r\n\r\n// creating a connection functiopn\r\n\r\nconst connection = async ()=>{\r\n   \r\n     // we are calling dotenv.congif() object function for making available our [Environment Variable]\r\n      dotenv.config();\r\n    \r\n    // here we are declaring the variable of connection  \r\n    let connc:any;\r\n\r\n    // here we are opening the try block\r\n    try{\r\n        // making the required connection properties \r\n        // note if the [multistatement] is true then you are inviting youself or i can say your application to the sql injection attack\r\n        \r\n        const connectionProperties = {\r\n            host:process.env.HOST,\r\n            user:process.env.USER,\r\n            password:process.env.PASSWORD,\r\n            database:process.env.DB,\r\n            multipleStatements:true\r\n        }\r\n\r\n        // here we are resolving the connection object\r\n        // if you want to see the whats inside the connection \r\n        // you can console.log(connc)\r\n      connc =  await mysql.createConnection(connectionProperties);\r\n\r\n      // here we are returning the [connc] object to the flow of the programm\r\n      \r\n      return  Promise.resolve(connc);\r\n        \r\n    }catch(e){\r\n        // here we are throw the error in case something did not happen according to our need\r\n        throw e;\r\n    }\r\n \r\n}\r\n\r\nexport {connection}\r\n","   // creating a function for testing the samecondition\r\n   const isDataPassedConditionChecking = (userSingleGenericData: string | null | undefined | number | any)=>{\r\n    \r\n    if(userSingleGenericData !== \"null\" && userSingleGenericData !== \"undefined\" && userSingleGenericData !== \"\" && userSingleGenericData !== undefined &&  userSingleGenericData !== null && userSingleGenericData && userSingleGenericData != undefined && userSingleGenericData != null){\r\n      // return true back to the flow so that flow can go furthur \r\n       return true;\r\n     }else{\r\n        // return false back to the flow so that flow can [Terminate] at the [controller] level\r\n        return false;\r\n     }\r\n   }\r\n\r\n    // named export\r\n   export {isDataPassedConditionChecking}\r\n\r\n","// Email Regex\r\n const email_regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n //mobile regex\r\n const phone_number_regex = /^[6-9]\\d{9}$/;\r\n\r\n \r\n // otp regex\r\n const otp_regex = /^[0-9]{8}$/;\r\n\r\n // eror response\r\n const throwErrorNow = (sCode:number , msg:any)=>{\r\n    const errorObject = {\r\n        statusCode: sCode,\r\n        body: JSON.stringify({ message:msg})\r\n    }\r\n\r\n    return errorObject;\r\n }\r\n\r\n const sendSuccessResponse = (sCode:number , msg:any)=>{\r\n      const successResponse = {\r\n        statusCode:sCode,\r\n        body:JSON.stringify({message:msg})\r\n      }\r\n\r\n      return successResponse;\r\n }\r\n\r\n export {email_regex , phone_number_regex , otp_regex , throwErrorNow , sendSuccessResponse}","module.exports = require(\"bcryptjs\");","module.exports = require(\"dotenv\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"promise-mysql\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/controllers/updatepassword/update_pass_controller.ts\");\n",""],"names":[],"sourceRoot":""}